FORMAT: 1A
HOST: https://app.pipefy.com


# Pipefy API

This is the Pipe API documentation.

[Here](http://docs.pipefy.apiary.io) you will find the guidelines for getting started with the API.

## List pipes [/queries{?pipes}]

Get pipes by their identifiers.

**Request Body**
```
{
  pipes(ids: [241213, 654321]) {
    id
    name
    phases {
      name
      cards (first: 5) {
        edges {
          node {
            id
            title
          }
        }
      }
    }
  }
}
```

### pipes(ids: [pipe_ids]) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "{ pipes (ids: [241213, 654321]) { id name phases { name cards (first: 5) { edges { node { id title } } } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipes": [
                  {
                    "id": "243585",
                    "name": "Simple To-do List",
                    "phases": [
                      {
                        "name": "To do",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712454",
                                "title": "Call John"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Doing",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712458",
                                "title": "Sales Report"
                              }
                            },
                            {
                              "node": {
                                "id": "2712464",
                                "title": "Financial Report "
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "On hold",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712469",
                                "title": "Buy more pencils"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Done",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712480",
                                "title": "Send email to Peter"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Archived",
                        "cards": {
                          "edges": []
                        }
                      }
                    ]
                  },
                  {
                    "id": "243587",
                    "name": "Sales Pipeline",
                    "phases": [
                      {
                        "name": "Prospect",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712485",
                                "title": "Oscorp"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Discovery",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712489",
                                "title": "Stark"
                              }
                            },
                            {
                              "node": {
                                "id": "2712524",
                                "title": "Wayne Enterprises"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Proposal",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712529",
                                "title": "Jurassic Park"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Negotiation",
                        "cards": {
                          "edges": []
                        }
                      },
                      {
                        "name": "Won",
                        "cards": {
                          "edges": []
                        }
                      },
                      {
                        "name": "Lost",
                        "cards": {
                          "edges": []
                        }
                      }
                    ]
                  }
                ]
              }
            }

## Show pipe [/queries{?pipe}]

Get a pipe by its identifier.

**Request Body**
```
{
  pipe(id: 219739) {
    id
    name
    phases {
      name
      cards (first: 5) {
        edges {
          node {
            id
            title
          }
        }
      }
    }
  }
}
```

### pipe(id: pipe_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "{ pipe(id: 219739) { id name phases { name cards(first: 5) { edges { node { id, title } } } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipe": {
                  "id": "243585",
                  "name": "Simple To-do List",
                  "phases": [
                    {
                      "name": "To do",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712454",
                              "title": "Call John"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Doing",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712458",
                              "title": "Sales Report"
                            }
                          },
                          {
                            "node": {
                              "id": "2712464",
                              "title": "Financial Report "
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "On hold",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712469",
                              "title": "Buy more pencils"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Done",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712480",
                              "title": "Send email to Peter"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Archived",
                      "cards": {
                        "edges": []
                      }
                    }
                  ]
                }
              }
            }

## Clone pipe [/queries{?clone_pipe}]

Mutation to clone a pipe, in case of success a query is returned.

**Request Body**

```
mutation {
  clonePipes(
    input: {
      organization_id: 65386
      pipe_template_ids: [211269, 211270]
    }
  ) {
    pipes {
      id
      name
    }
  }
}
```

### clonePipes(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { clonePipes(input: { organization_id: 65386 pipe_template_ids: [211269, 211270] }) { pipes { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "clonePipes": {
                  "pipes": [
                    {
                      "id": "241213",
                      "name": "Secret Project (copy 1)"
                    },
                    {
                      "id": "246366",
                      "name": "Geral (copy 1)"
                    }
                  ]
                }
              }
            }

## Create pipe [/queries{?create_pipe}]

Mutation to create a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  createPipe(
    input: {
      organization_id: 65386
      name: "Secret Project"
      labels: [
        {name: "Label 01", color: "#FF0042"}
      ]
      members: [
        {user_id: 68310, role_name: "admin"}
        {user_id: 83956, role_name: "member"}
      ]
      phases: [
        {name: "First Step"}
        {name: "Finished", done: true}
      ]
      start_form_fields: [
        {type_id: "short_text", label: "Taks Name", editable: true}
        {type_id: "email", label: "Contact Email"}
      ]
      preferences: {
        inboxEmailEnabled: true
      }
    }
  ) {
    pipe {
      id
      name
    }
  }
}
```

### createPipe(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { createPipe(input: { organization_id: 65386 name: \"Secret Project\" labels: [{ name: \"Label 01\", color:\"#FF0042\"}] members: [{ user_id: 12345, role_name: \"admin\"} { user_id: 12345, role_name: \"member\"}] phases: [{ name:\"First Step\"} { name: \"Finished\", done: true }] start_form_fields: [{ label: \"Taks Name\", type_id: \"short_text\", editable: true } { label: \"Contact Email\", type_id: \"email\" }] preferences: { inboxEmailEnabled: true } }) { pipe { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPipe": {
                  "pipe": {
                    "id": "236156",
                    "name": "Secret Project"
                  }
                }
              }
            }

## Update pipe [/queries{?update_pipe}]

Mutation to update a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePipe(
    input: {
      id: 236156
      icon: "emo"
      title_field_id: "contact_email"
      public: false
      public_form: true
      only_assignees_can_edit_cards: false
      anyone_can_create_card: true
      expiration_time_by_unit: 2
      expiration_unit: 86400
    }
  ) {
    pipe {
      id
      name
    }
  }
}
```

### updatePipe(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { updatePipe(input: { id: 236156 icon: \"emo\" title_field_id: \"contact_email\" public: false public_form: true only_assignees_can_edit_cards: false anyone_can_create_card: true expiration_time_by_unit: 2 expiration_unit: 86400 }) { pipe { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "updatePipe": {
                  "pipe": {
                    "id": "219739",
                    "name": "Secret Project"
                  }
                }
              }
            }

## Delete pipe [/queries{?delete_pipe}]

Mutation to delete a pipe, in case of success `success: true` is returned.

**Request Body**
```
mutation {
  deletePipe(input: { id: 236156 }) {
    success
  }
}
```

### deletePipe(input: {pipe_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { deletePipe(input: { id: 236156 }) { success } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "deletePipe": {
                  "card": {
                    "success": true
                  }
                }
              }
            }


## Show phase [/queries{?phase}]

Get a phase by its identifier.

**Request Body**
```
{
  phase(id: 1741520) {
    id
    name
    cards_count
    cards {
      edges {
        node {
          id
          title
        }
      }
    }
    fields {
      id
    }
  }
}
```

### phase(id: phase_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "{ phase(id: 1741520) { id name cards_count cards { edges { node { id title } } } fields { id } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "phase": {
                  "id": "1741520",
                  "name": "Discovery",
                  "cards_count": 2,
                  "cards": {
                    "edges": [
                      {
                        "node": {
                          "id": "2712489",
                          "title": "Stark"
                        }
                      },
                      {
                        "node": {
                          "id": "2712524",
                          "title": "Wayne Enterprises"
                        }
                      }
                    ]
                  },
                  "fields": [
                    {
                      "id": "first_contact"
                    },
                    {
                      "id": "customer_s_needs"
                    },
                    {
                      "id": "how_hot_is_this_opportunity"
                    }
                  ]
                }
              }
            }

## Create phase [/queries{?add_phase}]

Mutation to create a phase, in case of success a query is returned.

**Request Body**

```
mutation {
  createPhase(
    input: {
      pipe_id: 243587
      name: "First Phase"
      done: false
      lateness_time: 172800
      description: "This is the first phase of the secret plan."
      can_receive_card_directly_from_draft: true
    }
  ) {
    phase {
      id
      name
    }
  }
}
```

### createPhase(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { createPhase(input: { pipe_id: 243587 name: \"First Phase\" done: false lateness_time: 172800 description: \"This is the first phase of the secret plan.\" can_receive_card_directly_from_draft: true } ) { phase { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPhase": {
                  "phase": {
                    "id": "1749257",
                    "name": "First Phase"
                  }
                }
              }
            }

## Update phase [/queries{?update_phase}]

Mutation to update a phase, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePhase(
    input: {
      id: 1749257
      name: "New name"
      done: true
      description: "New phase description."
      can_receive_card_directly_from_draft: false
    }
  ) {
    phase {
      id
      name
    }
  }
}
```

### updatePhase(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { updatePhase(input: { id: 1749257 name: \"New name\" done: true description: \"New phase description.\" can_receive_card_directly_from_draft: true }) { phase { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "updatePhase": {
                  "phase": {
                    "id": "1749257",
                    "name": "New name"
                  }
                }
              }
            }

## Delete phase [/queries{?delete_phase}]

Mutation to delete a phase of a pipe, in case of success `success: true` is returned.

**Request Body**
```
mutation {
  deletePhase( input: { id: 1773084 }) {
    success
  }
}
```

### deletePhase(input: {phase_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "mutation { deletePhase(input: { id: 1773084 }) { success } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "deletePhase": {
                  "success": true
                }
              }
            }

## Create phase field [/queries{?create_phase_field}]

Mutation to create a phase field, in case of success a query is returned.

**Request Body**

```
mutation {
  createPhaseField(
    input: {
      phase_id: 1741519
      type: "radio_horizontal"
      label: "Did you finish the task?"
      options: ["Yes", "No"]
      description: "Select if you finish the task or not."
      required: true
      editable: false
    }
  ) {
    phase_field {
      id
      label
    }
  }
}
```

### createPhaseField(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ createPhaseField(input: { phase_id: 1741519 type: \"radio_horizontal\" label: \"Did you finish the task?\" options: [\"Yes\", \"No\"] description: \"Select if you finish the task or not.\" required: true help: \"Whether or not you finish the task.\" editable: false } ) { phase_field { id label } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPhaseField": {
                  "phase_field": {
                    "id": "did_you_finish_the_task",
                    "label": "Did you finish the task?"
                  }
                }
              }
            }

## Update phase field [/queries{?update_phase_field}]

Mutation to update a phase field, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePhaseField(
    input: {
      id: "did_you_finish_the_task"
      label: "Have you finished the task?"
      options: ["Yep", "Nope"]
      required: false
      editable: true
    }
  ) {
    phase_field {
      id
      label
    }
  }
}
```

### updatePhaseField(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { updatePhaseField(input: {id: \"did_you_finish_the_task\" label: \"Have you finished the task?\" required: false editable: true }) { phase_field { id label } } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "updatePhaseField": {
                  "phase_field": {
                    "id": "did_you_finish_the_task",
                    "label": "Have you finished the task?"
                  }
                }
              }
            }

## Delete phase field [/queries{?delete_phase_field}]

Mutation to delete a phase field, in case of success `success: true` is returned.

**Request Body**
```
mutation {
  deletePhaseField(input: {id: "did_you_finish_the_task"}){
    success
  }
}
```

### deletePhaseField(input: {phase_field_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { deletePhaseField(input: {id: \"did_you_finish_the_task\" }) { success } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "deletePhaseField": {
                  "success": true
                }
              }
            }

## Create label [/queries{?create_label}]

Mutation to create a label, in case of success a query is returned.

**Request Body**

```
mutation {
  createLabel(
    input: {
      pipe_id: 219739
      name: "Important!"
      color: "#FF0000"
    }
  ) {
    label {
      id
      name
    }
  }
}
```

### createLabel(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { createLabel(input: {pipe_id: 219739 name: \"Important!\" color: \"#FF0000\" }){ label{ id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createLabel": {
                  "label": {
                    "id": "997910",
                    "name": "Important!"
                  }
                }
              }
            }

## Update label [/queries{?update_label}]

Mutation to update a label, in case of success a query is returned.

**Request Body**
```
mutation {
  updateLabel(
    input: {
      id: 997910
      name: "Very Important!"
      color: "#FF6347"
    }
  ) {
    label {
      id
      name
    }
  }
}
```

### updateLabel(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { updateLabel(input:{id: 997910 name: \"Very Important!\" color: \"#FF6347\" }){ label{ id name } } }" 
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "updateLabel": {
                  "label": {
                    "id": "997910",
                    "name": "Very Important!"
                  }
                }
              }
            }

## Delete label [/queries{?delete_label}]

Mutation to delete a label, in case of success `success: true` is returned.

**Request Body**
```
mutation {
  deleteLabel(input: { id: 997910 }) {
    success
  }
}
```

### deleteLabel(input: {label_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { deleteLabel(input: {id: 997910}) { success } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "deleteLabel": {
                  "success": true
                }
              }
            }

## List cards [/queries{?cards}]

Get cards by pipe identifier.

**Request Body**
```
{
  cards(pipe_id: 243587, first: 10, search: {title: "Stark"}) {
    edges {
      node {
        id
        title
        assignees {
          id
        }
        comments {
          text
        }
        comments_count
        current_phase {
          name
        }
        done
        due_date
        fields {
          name
          value
        }
        labels {
          name
        }
        phases_history {
          phase {
            name
          }
          firstTimeIn
          lastTimeOut
        }
        url
      }
    }
  }
}
```

### cards(pipe_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "{ cards(pipe_id: 243587, first: 10, search: {title: \"Stark\"}) { edges { node { id title assignees { id } comments { text } comments_count current_phase { name } done due_date fields { name value } labels { name } phases_history { phase { name } firstTimeIn lastTimeOut } url } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "cards": {
                  "edges": [
                    {
                      "node": {
                        "id": "2712489",
                        "title": "Stark",
                        "assignees": [
                          {
                            "id": "68310"
                          }
                        ],
                        "comments": [
                          {
                            "text": "Hey @claudio.furini, this is a great comment."
                          }
                        ],
                        "comments_count": 1,
                        "current_phase": {
                          "name": "Discovery"
                        },
                        "done": false,
                        "due_date": "2017-08-30T20:54:59-03:00",
                        "fields": [
                          {
                            "name": "First contact",
                            "value": "25 de Agosto"
                          },
                          {
                            "name": "Customer's needs ",
                            "value": "Cool hats. "
                          },
                          {
                            "name": "How hot is this opportunity?",
                            "value": "[\"Hot\"]"
                          },
                          {
                            "name": "Company size",
                            "value": "Enterprise"
                          },
                          {
                            "name": "Company name",
                            "value": "Stark"
                          },
                          {
                            "name": "Contact name",
                            "value": "Tony Stark"
                          },
                          {
                            "name": "Contact email",
                            "value": "tony@stark.com"
                          },
                          {
                            "name": "Contact phone",
                            "value": "+55 11 2356-7898"
                          },
                          {
                            "name": "Deal value",
                            "value": "10.000,00"
                          }
                        ],
                        "labels": [
                          {
                            "name": "Hot"
                          }
                        ],
                        "phases_history": [
                          {
                            "phase": {
                              "name": "Start form"
                            },
                            "firstTimeIn": "2017-08-14T14:38:40-03:00",
                            "lastTimeOut": "2017-08-14T14:38:40-03:00"
                          },
                          {
                            "phase": {
                              "name": "Prospect"
                            },
                            "firstTimeIn": "2017-08-14T14:38:40-03:00",
                            "lastTimeOut": "2017-08-14T14:38:42-03:00"
                          },
                          {
                            "phase": {
                              "name": "Discovery"
                            },
                            "firstTimeIn": "2017-08-14T14:38:42-03:00",
                            "lastTimeOut": null
                          }
                        ],
                        "url": "http://app.pipefy.com/pipes/243587#cards/2712489"
                      }
                    }
                  ]
                }
              }
            }

## Show card [/queries{?card}]

Get a card by its identifier.

**Request Body**
```
{
  card(id: 2712489) {
    title
    assignees {
      id
    }
    comments {
      text
    }
    comments_count
    current_phase {
      name
    }
    done
    due_date
    fields {
      name
      value
    }
    labels {
      name
    }
    phases_history {
      phase {
        name
      }
      firstTimeIn
      lastTimeOut
    }
    url
  }
}
```

### card(id: card_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "{ card(id: 2712489) { title assignees { id } comments { id } comments_count current_phase { name } done due_date fields { name value } labels { name } phases_history { phase { name } firstTimeIn lastTimeOut } url } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "card": {
                  "title": "Stark",
                  "assignees": [
                    {
                      "id": "68310"
                    }
                  ],
                  "comments": [
                    {
                      "text": "Hey @claudio.furini, this is a great comment."
                    }
                  ],
                  "comments_count": 1,
                  "current_phase": {
                    "name": "Discovery"
                  },
                  "done": false,
                  "due_date": "2017-08-30T20:54:59-03:00",
                  "fields": [
                    {
                      "name": "First contact",
                      "value": "25 de Agosto"
                    },
                    {
                      "name": "Customer's needs ",
                      "value": "Cool hats. "
                    },
                    {
                      "name": "How hot is this opportunity?",
                      "value": "[\"Hot\"]"
                    },
                    {
                      "name": "Company size",
                      "value": "Enterprise"
                    },
                    {
                      "name": "Company name",
                      "value": "Stark"
                    },
                    {
                      "name": "Contact name",
                      "value": "Tony Stark"
                    },
                    {
                      "name": "Contact email",
                      "value": "tony@stark.com"
                    },
                    {
                      "name": "Contact phone",
                      "value": "+55 11 2356-7898"
                    },
                    {
                      "name": "Deal value",
                      "value": "10.000,00"
                    }
                  ],
                  "labels": [
                    {
                      "name": "Hot"
                    }
                  ],
                  "phases_history": [
                    {
                      "phase": {
                        "name": "Start form"
                      },
                      "firstTimeIn": "2017-08-14T14:38:40-03:00",
                      "lastTimeOut": "2017-08-14T14:38:40-03:00"
                    },
                    {
                      "phase": {
                        "name": "Prospect"
                      },
                      "firstTimeIn": "2017-08-14T14:38:40-03:00",
                      "lastTimeOut": "2017-08-14T14:38:42-03:00"
                    },
                    {
                      "phase": {
                        "name": "Discovery"
                      },
                      "firstTimeIn": "2017-08-14T14:38:42-03:00",
                      "lastTimeOut": null
                    }
                  ],
                  "url": "http://app.pipefy.com/pipes/243587#cards/2712489"
                }
              }
            }

## Create card [/queries{?create_card}]

Mutation to create a card, in case of success a query is returned. 

**Request Body**
```
mutation{
  createCard(
    input: {
      pipe_id: 219739
      fields_attributes: [
        {field_id: "assignee", field_value:[68310, 87021]}
        {field_id: "checklist_vertical", field_value: ["a", "b"]}
        {field_id: "checklist_horizontal", field_value: ["b"]}
        {field_id: "cpf", field_value: "123.456.789-00"}
        {field_id: "cnpj", field_value: "12.345.678/1234-00"}
        {field_id: "date", field_value: "1977-01-20"}
        {field_id: "date_time", field_value: "2017-07-20T21:00:00+00:00"}
        {field_id: "due_date", field_value: "2017-07-20T21:00:00+00:00"}
        {field_id: "currency", field_value: "9500.50"}
        {field_id: "label_select", field_value: [890073, 908006]}
        {field_id: "email", field_value: "rocky.balboa@email.com"}
        {field_id: "number", field_value: 9000}
        {field_id: "short_text", field_value: "Rocky Balboa"}
        {field_id: "long_text", field_value: "It ain’t about how hard you hit. It’s about how hard you can get hit and keep moving forward. It’s how much you can take, and keep moving forward. That’s how winning is done."}
        {field_id: "radio_vertical", field_value: "yes"}
        {field_id: "radio_horizontal", field_value: "no"}
        {field_id: "phone", field_value: "+55 11 1234-5678"}
        {field_id: "select", field_value: "B. Rocky Balboa II"}
        {field_id: "time", field_value: "17:25"}
      ]
      parent_ids: ["2750027"]
    }
  ) {
    card {
      id
      title
    }
  }
}
```

### createCard(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ createCard(input: {pipe_id: 219739 fields_attributes: [{field_id: \"assignee\", field_value: [68310, 87021]} {field_id: \"checklist_vertical\", field_value: [\"a\", \"b\"]} {field_id: \"checklist_horizontal\", field_value: [\"b\"]} {field_id: \"cpf\", field_value: \"123.456.789-00\"} {field_id: \"cnpj\", field_value: \"12.345.678/1234-00\"} {field_id: \"date\", field_value: \"1977-01-20\"} {field_id: \"date_time\", field_value: \"2017-07-20T21:00:00+00:00\"} {field_id: \"due_date\", field_value: \"2017-07-20T21:00:00+00:00\"} {field_id: \"currency\", field_value: \"9500.50\"} {field_id: \"label_select\", field_value: [890073, 908006]} {field_id: \"email\", field_value: \"rocky.balboa@email.com\"} {field_id: \"number\", field_value: 9000} {field_id: \"short_text\", field_value: \"Rocky Balboa\"} {field_id: \"long_text\", field_value: \"It ain’t about how hard you hit. It’s about how hard you can get hit and keep moving forward. It’s how much you can take, and keep moving forward. That’s how winning is done.\"} {field_id: \"radio_vertical\", field_value: \"yes\"} {field_id: \"radio_horizontal\", field_value: \"no\"} {field_id: \"phone\", field_value: \"+55 11 1234-5678\"} {field_id: \"select\", field_value: \"B. Rocky Balboa II\"} {field_id: \"time\", field_value: \"17:25\"}] parent_ids: [\"2735966\"] }) { card {id title }}}"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "createCard": {
                  "card": {
                    "id": "2762646",
                    "title": "Rocky Balboa"
                  }
                }
              }
            }

## Update card [/queries{?update_card}]

Mutation to update a card, in case of success a query is returned. 

**Request Body**
```
mutation{
  updateCard(
    input: {
      id: 2762646
      title: "New Title"
      due_date: "2017-08-20T21:00:00+00:00"
      assignee_ids: [68310]
      label_ids: [890073]
    }
  ) {
    card {
      id
      title
    }
  }
}
```

### updateCard(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ updateCard(input: {id: 2762646 title: \"New Title\" due_date: \"2017-08-20T21:00:00+00:00\" assignee_ids: [68310] label_ids: [890073] }) { card { id title }}}" 
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "updateCard": {
                  "card": {
                    "id": "2762646",
                    "title": "New Title"
                  }
                }
              }
            }

## Delete card [/queries{?delete_card}]

Mutation to delete a card, in case of success `success: true` is returned. 

**Request Body**
```
mutation {
  deleteCard(input: {id: 2762646}) {
    success
  }
}
```

### deleteCard(input: {card_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ deleteCard(input: {id: 2762646}) { success } }" 
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "deleteCard": {
                  "success": true
                }
              }
            }

## Move card to phase [/queries{?move_card_to_phase}]

Mutation to move a card to a phase, in case of success a query is returned. 

**Request Body**
```
mutation {
  moveCardToPhase(
    input: {
      card_id: 2750027
      destination_phase_id: 1624317
    }
  ) {
    card {
      id
      current_phase{
        name
      }
    }
  }
}
```

### moveCardToPhase(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ moveCardToPhase(input: {card_id: 2750027 destination_phase_id: 1624317 }){ card{ id current_phase { name } } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "moveCardToPhase": {
                  "card": {
                    "id": "2750027",
                    "current_phase": {
                      "name": "doing"
                    }
                  }
                }
              }
            }

## Update card field [/queries{?update_card_field}]

Mutation to update a card field, in case of success a query is returned.

**Request Body**
```
mutation {
  updateCardField(
    input: {
      card_id: 2750027
      field_id: "where_do_you_live"
      new_value: "Auckland"
    }
  ) {
    card {
      id
    }
  }
}
```

### updateCardField(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ updateCardField(input: {card_id: 2750027 field_id: \"where_do_you_live\" new_value: \"Auckland\" }){ card{ id } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "updateCardField": {
                  "card": {
                    "id": "2750027"
                  }
                }
              }
            }

## Create comment [/queries{?add_comment}]

Mutation to create a comment, in case of success a query is returned.

**Request Body**
```
mutation {
  createComment(
    input: {
      card_id: 2750027
      text: "Life is like a box of chocolates. You never know what you're gonna get."
    }
  ) {
    comment {
      id
      text
    }
  }
}
```

### createComment(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { createComment(input: {card_id: 2750027 text: \"Life is like a box of chocolates. You never know what you're gonna get.\" }) { comment { id text } } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "createComment": {
                  "comment": {
                    "id": "492421",
                    "text": "Life is like a box of chocolates. You never know what you're gonna get."
                  }
                }
              }
            }

## Update comment [/queries{?update_comment}]

Mutation to update a comment, in case of success a query is returned.

**Request Body**
```
mutation {
  updateComment(
    input: {
      id: 495894
      text: "Let me explain something to you. Um, I am not Mr. Lebowski. You're Mr. Lebowski. I'm the Dude. So that's what you call me. You know, that or, uh, His Dudeness, or uh, Duder, or El Duderino if you're not into the whole brevity thing."
    }
  ) {
    comment {
      id
      text
    }
  }
}
```

### updateComment(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation{ updateComment(input: {id: 495894, text: \"Let me explain something to you. Um, I am not Mr. Lebowski. You're Mr. Lebowski. I'm the Dude. So that's what you call me. You know, that or, uh, His Dudeness, or uh, Duder, or El Duderino if you're not into the whole brevity thing.\" }){ comment { id text } } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "updateComment": {
                  "comment": {
                    "id": "495894",
                    "text": "Let me explain something to you. Um, I am not Mr. Lebowski. You're Mr. Lebowski. I'm the Dude. So that's what you call me. You know, that or, uh, His Dudeness, or uh, Duder, or El Duderino if you're not into the whole brevity thing."
                  }
                }
              }
            }

## Delete comment [/queries{?delete_comment}]

Mutation to delete a comment, in case of success `success: true` is returned.

**Request Body**
```
mutation {
  deleteComment(input:{id: 495894}) {
    success
  }
}
```

### deleteComment(input: {comment_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { deleteComment(input: {id: 495894 }) { success } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "deleteComment": {
                  "success": true
                }
              }
            }

## Set role [/queries{?set_role}]

Mutation to set a user's role, in case of success a query is returned.

**Request Body**
```
mutation {
  setRole(
    input: {
      pipe_id: 219739
      member: {
        user_id: 77303
        role_name: "admin"
      }
    }
  ) {
    member {
      user {
        id
      }
      role_name
    }
  }
}
```

### setRole(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { setRole(input: {pipe_id: 219739 member: {user_id: 77303 role_name: \"admin\" } }) { member{ user{ id } role_name } } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body
    
            {
              "data": {
                "setRole": {
                  "member": {
                    "user": {
                      "id": "77303"
                    },
                    "role_name": "admin"
                  }
                }
              }
            }

## Show pipe relations [/queries{?pipe_relations}]

Get pipe relations by their identifiers.

**Request Body**
```
{
  pipe_relations(ids: [5078, 5079]) {
    id
    name
    allChildrenMustBeDoneToMoveParent
    allChildrenMustBeDoneToFinishParent
    canCreateNewItems
    canConnectExistingItems
    canConnectMultipleItems
    childMustExistToMoveParent
    childMustExistToFinishParent
  }
}
```

### pipe_relations(ids: [relation_id]) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
                "query": "{ pipe_relations(ids:[5078, 5079]) { id name allChildrenMustBeDoneToMoveParent allChildrenMustBeDoneToFinishParent canCreateNewItems canConnectExistingItems canConnectMultipleItems childMustExistToMoveParent childMustExistToFinishParent } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipe_relations": [
                  {
                    "id": "5078",
                    "name": "Sales Connection",
                    "allChildrenMustBeDoneToMoveParent": false,
                    "allChildrenMustBeDoneToFinishParent": true,
                    "canCreateNewItems": true,
                    "canConnectExistingItems": true,
                    "canConnectMultipleItems": true,
                    "childMustExistToMoveParent": false,
                    "childMustExistToFinishParent": false
                  },
                  {
                    "id": "5079",
                    "name": "Secret Project Connection",
                    "allChildrenMustBeDoneToMoveParent": false,
                    "allChildrenMustBeDoneToFinishParent": false,
                    "canCreateNewItems": true,
                    "canConnectExistingItems": true,
                    "canConnectMultipleItems": false,
                    "childMustExistToMoveParent": false,
                    "childMustExistToFinishParent": false
                  }
                ]
              }
            }

## Create pipe relation [/queries{?create_pipe_relation}]

Mutation to create a pipe relation between two pipes, in case of success a query is returned.

**Request Body**
```
mutation {
  createPipeRelation(
    input: {
      parentId: 211269
      childId: 211270
      name: "Connection between pipes"
      allChildrenMustBeDoneToFinishParent: false
      childMustExistToMoveParent: true
      childMustExistToFinishParent: false
      allChildrenMustBeDoneToMoveParent: false
      canCreateNewItems: true
      canConnectExistingItems: true
      canConnectMultipleItems: false
    }
  ) {
    pipeRelation {
      id
      name
    }
  }
}
```

### createPipeRelation(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { createPipeRelation(input: { parentId: 211269 childId: 211270 name: \"Connection between pipes\" allChildrenMustBeDoneToFinishParent: false childMustExistToMoveParent: true childMustExistToFinishParent: false allChildrenMustBeDoneToMoveParent: false canCreateNewItems: true canConnectExistingItems: true canConnectMultipleItems: false  }) { pipeRelation { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPipeRelation": {
                  "pipeRelation": {
                    "id": "5115",
                    "name": "Connection between pipes"
                  }
                }
              }
            }

## Update pipe relation [/queries{?update_pipe_relation}]

Mutation to update a pipe relation, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePipeRelation(
    input: {
      id: 5115
      name: "New relation name"
      allChildrenMustBeDoneToFinishParent: true
      childMustExistToMoveParent: false
      childMustExistToFinishParent: false
      allChildrenMustBeDoneToMoveParent: true
      canCreateNewItems: false
      canConnectExistingItems: true
      canConnectMultipleItems: false
    }
  ) {
    pipeRelation {
      id
      name
    }
  }
}
```

### updatePipeRelation(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { updatePipeRelation(input: {id: 5115 name: \"New relation name\" allChildrenMustBeDoneToFinishParent: true childMustExistToMoveParent: false childMustExistToFinishParent: false allChildrenMustBeDoneToMoveParent: true canCreateNewItems: false canConnectExistingItems: true canConnectMultipleItems: false }) { pipeRelation { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "updatePipeRelation": {
                  "pipeRelation": {
                    "id": "5115",
                    "name": "New relation name"
                  }
                }
              }
            }

## Delete pipe relation [/queries{?delete_pipe_relation}]

Mutation to delete a pipe relation, in case of success `success: true` is returned.

**Request Body**
```
mutation {
  deletePipeRelation(input:{id: 5115}) {
    success
  }
}
```

### deletePipeRelation(input: {pipe_relation_id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            { 
                "query": "mutation { deletePipeRelation(input: {id: 5115}) { success } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "deletePipeRelation": {
                  "success": true
                }
              }
            }