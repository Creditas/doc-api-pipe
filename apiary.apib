FORMAT: 1A
HOST: https://app.pipefy.com


# Pipefy API

This is the Pipe API documentation.

[Here](http://docs.pipefy.apiary.io) you will find the guidelines for getting started with the API.

## List pipes [/queries{?pipes}]

Get pipes by their identifiers.

**Request Body**
```
{
  pipes(ids:[123456, 654321]) {
    id
    name
    phases{
      name
      cards (first: 5) {
        edges {
          node {
            id
            name
          }
        }
      }
    }
  }
}
```

### pipes(ids: [pipe_ids]) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "{ pipes (ids: [123456, 654321]) { id, name, phases { name, cards (first: 5) { edges { node { id, name } } } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipes": [
                  {
                    "id": "243585",
                    "name": "Simple To-do List",
                    "phases": [
                      {
                        "name": "To do",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712454",
                                "title": "Call John"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Doing",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712458",
                                "title": "Sales Report"
                              }
                            },
                            {
                              "node": {
                                "id": "2712464",
                                "title": "Financial Report "
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "On hold",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712469",
                                "title": "Buy more pencils"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Done",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712480",
                                "title": "Send email to Peter"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Archived",
                        "cards": {
                          "edges": []
                        }
                      }
                    ]
                  },
                  {
                    "id": "243587",
                    "name": "Sales Pipeline",
                    "phases": [
                      {
                        "name": "Prospect",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712485",
                                "title": "Oscorp"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Discovery",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712489",
                                "title": "Stark"
                              }
                            },
                            {
                              "node": {
                                "id": "2712524",
                                "title": "Wayne Enterprises"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Proposal",
                        "cards": {
                          "edges": [
                            {
                              "node": {
                                "id": "2712529",
                                "title": "Jurassic Park"
                              }
                            }
                          ]
                        }
                      },
                      {
                        "name": "Negotiation",
                        "cards": {
                          "edges": []
                        }
                      },
                      {
                        "name": "Won",
                        "cards": {
                          "edges": []
                        }
                      },
                      {
                        "name": "Lost",
                        "cards": {
                          "edges": []
                        }
                      }
                    ]
                  }
                ]
              }
            }

## Show pipe [/queries{?pipe}]

Get a pipe by its identifier.

**Request Body**
```
{
  pipe(id:123456) {
    id
    name
    phases{
      name
      cards (first: 5) {
        edges{
          node{
            id
            title
          }
        }
      }
    }
  }
}
```

### pipe(id: pipe_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "{ pipe(id: 123456) { id, name, phases{ name, cards(first: 5){ edges{ node{ id, title } } } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipe": {
                  "id": "243585",
                  "name": "Simple To-do List",
                  "phases": [
                    {
                      "name": "To do",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712454",
                              "title": "Call John"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Doing",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712458",
                              "title": "Sales Report"
                            }
                          },
                          {
                            "node": {
                              "id": "2712464",
                              "title": "Financial Report "
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "On hold",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712469",
                              "title": "Buy more pencils"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Done",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "2712480",
                              "title": "Send email to Peter"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Archived",
                      "cards": {
                        "edges": []
                      }
                    }
                  ]
                }
              }
            }

## Clone pipe [/queries{?clone_pipe}]

Mutation to clone a pipe, in case of success a query is returned.

**Request Body**

```
mutation {
  clonePipes(
    input: {
      organization_id: 12345
      pipe_template_ids: [123456, 654321]
    }
  ) {
    pipes {
      id
      name
    }
  }
}
```

### clonePipes(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { clonePipes(input: { organization_id: 12345 pipe_template_ids: [123456, 654321] }) { pipes { id, name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "clonePipes": {
                  "pipes": [
                    {
                      "id": "123456",
                      "name": "Secret Project (copy 1)"
                    },
                    {
                      "id": "123456",
                      "name": "Geral (copy 1)"
                    }
                  ]
                }
              }
            }

## Create pipe [/queries{?create_pipe}]

Mutation to create a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  createPipe(
    input: {
      organization_id: 12345
      name: "Secret Project"
      labels: [
        {name: "Label 01", color: "#FF0042"}
      ]
      members: [
        {user_id: 68310, role_name: "admin"}
        {user_id: 83956, role_name: "member"}
      ]
      phases: [
        {name: "First Step"}
        {name: "Finished", done: true}
      ]
      start_form_fields: [
        {type_id: "short_text", label: "Taks Name", editable: true}
        {type_id: "email", label: "Contact Email"}
      ]
      preferences: {
        inboxEmailEnabled: true
      }
    }
  ) {
    pipe {
      id
      name
    }
  }
}
```

### createPipe(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { createPipe(input: { organization_id: 12345, name: \"Secret Project\", labels: [{ name: \"Label 01\", color:\"#FF0042\"}], members: [{ user_id: 12345, role_name: \"admin\"}, { user_id: 12345, role_name: \"member\"}], phases: [{ name:\"First Step\"}, { name: \"Finished\", done: true }], start_form_fields: [{ label: \"Taks Name\", type_id: \"short_text\", editable: true }, { label: \"Contact Email\", type_id: \"email\" }], preferences: { inboxEmailEnabled: true } }) { pipe { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPipe": {
                  "pipe": {
                    "id": "123456",
                    "name": "Secret Project"
                  }
                }
              }
            }

## Update pipe [/queries{?update_pipe}]

Mutation to update a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePipe(
    input: {
      id: 123456
      icon: "emo"
      title_field_id: "contact_email"
      public: false
      public_form: true
      only_assignees_can_edit_cards: false
      anyone_can_create_card: true
      expiration_time_by_unit: 2
      expiration_unit: 86400
    }
  ) {
    pipe {
      id
      name
    }
  }
}
```

### updatePipe(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { updatePipe(input: { id: 123456, icon: \"emo\", title_field_id: \"contact_email\", public: false, public_form: true, only_assignees_can_edit_cards: false, anyone_can_create_card: true, expiration_time_by_unit: 2, expiration_unit: 86400 }) { pipe { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "updatePipe": {
                  "pipe": {
                    "id": "219739",
                    "name": "Secret Project"
                  }
                }
              }
            }

## Delete pipe [/queries{?delete_pipe}]

Mutation to delete a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  deletePipe(input: { id: 123456 }) {
    success
  }
}
```

### deletePipe(input: {id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { deletePipe(input: { id: 1 }) { success } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "deletePipe": {
                  "card": {
                    "success": true
                  }
                }
              }
            }


## Show phase [/queries{?phase}]

Get a phase by its identifier.

**Request Body**
```
{
  phase(id: 1234567) {
    id
    name
    cards_count
    cards {
      edges {
        node {
          id
          title
        }
      }
    }
    fields {
      id
    }
  }
}
```

### phase(id: phase_id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "{ phase(id: 1234567) { id name cards_count cards { edges { node { id title } } } fields { id } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "phase": {
                  "id": "1234567",
                  "name": "Discovery",
                  "cards_count": 2,
                  "cards": {
                    "edges": [
                      {
                        "node": {
                          "id": "2712489",
                          "title": "Stark"
                        }
                      },
                      {
                        "node": {
                          "id": "2712524",
                          "title": "Wayne Enterprises"
                        }
                      }
                    ]
                  },
                  "fields": [
                    {
                      "id": "first_contact"
                    },
                    {
                      "id": "customer_s_needs"
                    },
                    {
                      "id": "how_hot_is_this_opportunity"
                    }
                  ]
                }
              }
            }

## Create phase [/queries{?add_phase}]

Mutation to create a phase, in case of success a query is returned.

**Request Body**

```
mutation {
  createPhase(
    input: {
      pipe_id: 123456
      name: "First Phase"
      done: false
      lateness_time: 172800
      description: "This is the first phase of the secret plan."
      can_receive_card_directly_from_draft: true
    }
  ) {
    phase {
      id
      name
    }
  }
}
```

### createPhase(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { createPhase(input: { pipe_id: 123456, name: \"First Phase\", done: false, lateness_time: 172800, description: \"This is the first phase of the secret plan.\", can_receive_card_directly_from_draft: true } ) { phase { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPhase": {
                  "phase": {
                    "id": "1749257",
                    "name": "First Phase"
                  }
                }
              }
            }

## Update phase [/queries{?update_phase}]

Mutation to update a phase, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePhase(
    input: {
      id: 1234567
      name: "New name"
      done: true
      description: "New phase description."
      can_receive_card_directly_from_draft: false
    }
  ) {
    phase {
      id
      name
    }
  }
}
```

### updatePhase(input: {params}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { updatePhase(input: { id: 1234567, name: \"New name\", done: true, description: \"New phase description.\", can_receive_card_directly_from_draft: true }) { phase { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "updatePhase": {
                  "phase": {
                    "id": "1749257",
                    "name": "New name"
                  }
                }
              }
            }

## Delete phase [/queries{?delete_phase}]

Mutation to delete a phase of a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  deletePhase( input: { id: 1234567 }) {
    success
  }
}
```

### deletePhase(input: {id}) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { deletePhase(input: { id: 1234567 }) { success } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "deletePhase": {
                  "success": true
                }
              }
            }