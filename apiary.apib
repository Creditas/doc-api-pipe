FORMAT: 1A
HOST: https://app.pipefy.com


# Pipefy API

This is Database's API documentation.

[Here](http://docs.pipefy.apiary.io) you will find the guidelines for getting started with the API.

## List pipes [/queries{?pipes}]

Get pipes by pipe ids.

**Request Body**
```
query {
  pipes(ids: [1, 2]) {
    id
    name
  }
}
```

### pipes(ids: [TABLE_IDS]) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "{ pipes(ids: [1, 2]) { id, name } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipes": [
                  {
                    "id": "1",
                    "name": "Pizza Order"
                  },
                  {
                    "id": "2",
                    "name": "Todo List"
                  }
                ]
              }
            }

## Show pipe [/queries{?pipe}]

Get a pipe by pipe id.

**Request Body**
```
query: {
  pipe(id: 1){
    id
    name
    phases{
      name
      cards(first: 1){
        edges{
          node{
            id
            title
          }
        }
      }
    }
  }
}
```

### Get pipe by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "{ pipe(id: 1) { id, name, phases{ name, cards(first: 1){ edges{ node{ id, title } } } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "pipe": {
                  "id": "1",
                  "name": " Pizza Order",
                  "phases": [
                    {
                      "name": "Prepare",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "4",
                              "title": "Peperoni"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Delivery",
                      "cards": {
                        "edges": [
                          {
                            "node": {
                              "id": "5",
                              "title": "Muzzarela"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "name": "Delivered",
                      "cards": {
                        "edges": [
                        ]
                      }
                    }
                  ]
                }
              }
            }

## Clone pipe [/queries{?clone_pipe}]

Mutation to clone a pipe, in case of success a query is returned.

**Request Body**

```
mutation { 
  clonePipes(
    input: {
      organization_id: 1
      pipe_template_ids: [1]
    }
  ) {
    pipes { id, name } 
  }
}
```

### clonePipes(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { clonePipes(input: { organization_id: 1 pipe_template_ids: [1] }) { pipes { id, name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "clonePipes": {
                  "pipes": [
                    {
                      "id": "97",
                      "name": " Pizza Order (copy 1)"
                    }
                  ]
                }
              }
            }

## Create pipe [/queries{?create_pipe}]

Mutation to create a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  createPipe(
    input: {
      organization_id: 5,
      name: "Flying Project",
      labels: [
        {
          name: "Single Label",
          color:"#FF0044"
        }
      ],
      members: [
        { 
          user_id: 3,
          role_name: "admin"
        }
      ],
      phases: [
        { name:"Building"},
        { name: "Built", done: true}
      ],
      start_form_fields: [
        {
          label: "Label of Fly Proj.",
          type_id: "phone"
        }
      ]
    }
  ) {
    pipe {
      name
      members { user { username } }
      phases { name }
      start_form_fields { id }
    }
  }
}
```

### createPipe(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { createPipe(input: { organization_id: 1, name: \"Flying Project\", labels: [{ name: \"Single Label\", color:\"#FF0044\"}], members: [{ user_id: 3, role_name: \"admin\"}], phases: [{ name:\"Building\"}, { name: \"Built\", done: true }], start_form_fields: [{ label: \"Label of Fly Proj.\", type_id: \"phone\"}] }) { pipe { name members { user { username } } phases { name } start_form_fields { id } } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPipe": {
                  "pipe": {
                    "name": "Flying Project",
                    "members": [
                      {
                        "user": {
                          "username": "obama"
                        }
                      },
                      {
                        "user": {
                          "username": "john"
                        }
                      }
                    ],
                    "phases": [
                      {
                        "name": "Inbox"
                      },
                      {
                        "name": "Building"
                      },
                      {
                        "name": "Doing"
                      },
                      {
                        "name": "Built"
                      },
                      {
                        "name": "Done"
                      }
                    ],
                    "start_form_fields": [
                      {
                        "id": "label_of_fly_proj"
                      }
                    ]
                  }
                }
              }
            }

## Update pipe [/queries{?update_pipe}]

Mutation to update a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  updatePipe(
    input: { 
      id: 1,
      name: "Pizza Order",
      icon: "dog",
      title_field_id: "customer_name",
      expiration_time_by_unit: 10,
      expiration_unit: 86400,
      public: true,
      only_admin_can_remove_cards: true,
      only_assignees_can_edit_cards: true,
      anyone_can_create_card: true
    }
  ) {
    pipe {
      name
      public
      only_assignees_can_edit_cards
      only_admin_can_remove_cards
      title_field { id }
    }
  }
}
```

### updatePipe(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { updatePipe(input: { id: 1, name: \"Pizza Order\", icon: \"dog\", title_field_id: \"customer_name\", expiration_time_by_unit: 10, expiration_unit: 86400, public: true, only_admin_can_remove_cards: true, only_assignees_can_edit_cards: true, anyone_can_create_card: true }) { pipe { name public only_assignees_can_edit_cards only_admin_can_remove_cards title_field { id } } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "updatePipe": {
                  "pipe": {
                    "name": "Pizza Order",
                    "public": true,
                    "only_assignees_can_edit_cards": true,
                    "only_admin_can_remove_cards": true,
                    "title_field": {
                      "id": "customer_name"
                    }
                  }
                }
              }
            }

## Delete pipe [/queries{?delete_pipe}]

Mutation to delete a pipe, in case of success a query is returned.

**Request Body**
```
mutation {
  deletePipe(input: { id: 1 }) {
    success
  }
}
```

### deletePipe(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { deletePipe(input: { id: 1 }) { success } }"
            }
            
+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "deletePipe": {
                  "card": {
                    "success": true
                  }
                }
              }
            }


## Show phase [/queries{?phase}]

Get a phase by phase id.

**Request Body**
```
query {
  phase(id: 2) {
    id
    name
    cards_count
    cards(first: 1) {
      edges {
        node {
          id
          title
        }
      }
    }
    fields { id }
    cards_can_be_moved_to_phases {
      id
      name
    }
  }
}
```

### Get phase by id [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "{ phase(id: 2) { id name cards_count cards(first: 1) { edges { node { id title } } } fields { id } cards_can_be_moved_to_phases { id name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "phase": {
                  "id": "2",
                  "name": "Delivery",
                  "cards_count": 6,
                  "cards": {
                    "edges": [
                      {
                        "node": {
                          "id": "5",
                          "title": "Error in Previous Phase"
                        }
                      }
                    ]
                  },
                  "fields": [
                    {
                      "id": "paid_value"
                    },
                    {
                      "id": "return_value"
                    },
                    {
                      "id": "arrival_time"
                    },
                    {
                      "id": "db_link"
                    }
                  ],
                  "cards_can_be_moved_to_phases": [
                    {
                      "id": "3",
                      "name": "Prepare"
                    },
                    {
                      "id": "4",
                      "name": "Delivered"
                    }
                  ]
                }
              }
            }

## Create phase [/queries{?add_phase}]

Mutation to create a phase, in case of success a query is returned.

**Request Body**

```
mutation { 
  createPhase(
    input: {
      pipe_id: 1,
      name: "To be Finished",
      description: "This phase is to be used for cards that are to be finished",
      done: true,
      only_admin_can_move_to_previous: true,
      can_receive_card_directly_from_draft: false
    }
  ) {
    phase { name }
  }
}
```

### createPhase(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { createPhase(input: { pipe_id: 1, name: \"To be Finished\", description: \"This phase is to be used for cards that are to be finished\", done: true, only_admin_can_move_to_previous: true, can_receive_card_directly_from_draft: false } ) { phase { name } } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "createPhase": {
                  "phase": {
                    "name": "To be Finished"
                  }
                }
              }
            }

## Update phase [/queries{?update_phase}]

Mutation to update a phase, in case of success a query is returned.

- phase's parameters:
    - phase id
    - name
    - done
    - lateness time
    - description
    - only admin can move to previous
    - can receive card directly from draft

**Request Body**
```
mutation{
  updatePhase(
    input: {
      id: 586,
      name: "Available to test",
      description: "I'm editing this phase",
      done: false,
      lateness_time: 3600,
      only_admin_can_move_to_previous: false,
      can_receive_card_directly_from_draft: true
    }
  ) {
    phase {
      id
      name
      done
    }
  }
}
```

### updatePhase(input: params) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { updatePhase(input: { id: 586, name: \"Available to test\", description: \"I'm editing this phase\", done: false, lateness_time: 3600, only_admin_can_move_to_previous: false, can_receive_card_directly_from_draft: true }) { phase { id name done } } }"
            }

+ Response 200 (application/json; charset=utf-8)
    
    + Body

            {
              "data": {
                "updatePhase": {
                  "phase": {
                    "id": "586",
                    "name": "Available to test",
                    "done": false
                  }
                }
              }
            }

## Delete phase [/queries{?delete_phase}]

Mutation to delete a phase of a pipe, in case of success a query is returned.

- parameter:
    - phase id

**Request Body**
```
mutation {
  deletePhase(input: { id: 586 }) {
    success
  }
}
```

### deletePhase(input: id) [POST]

+ Request (application/json)

    + Headers

            Authorization: Bearer your_personal_access_token

    + Body

            {
              "query": "mutation { deletePhase(input: { id: 1 }) { success } }"
            }

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
              "data": {
                "deletePhase": {
                  "success": true
                }
              }
            }